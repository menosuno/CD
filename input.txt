week 8 sp:
1.Write a Lexprogram to convert functions to macros and vice versa.
exe:
1.Write a yacc program to implement arithmetic operators.
2.Write a yacc program to implement logical operators.
3.Write a yacc program to implement relational operators.

week 9 sp:
1.Write a yacc program to validate the infix expression.
2.Write a yacc program to validate the nestedfor construct.
Input:int main(){for (int i=0; i<2; i++){for (int j=0; j<4; j++){printf("%d, %d\n",i ,j);}}return 0;}
exe:
1.Write a yacc program to implement Boolean operators.
2.Write a yacc program to validate the prefix and postfix expression.
3.Write a yacc program to validate the given for construct.
int main(){for (int i=0; i<2; i++){Print(“%d \n”, i);}return 0;}

week 10 sp:
1.Write a program to validate and evaluate the prefix and Postfix using LEX and YACC.
exe:
1.Generate    YACC    specification    for    a    few    syntactic    categories.
a.Program to recognize a valid variable which starts with a letter followed by any number of letters or digits. 
2.Using  Lex  and  yacc  to  evaluate  relational  operators  which  includes logical operators.
3.Implementation of Simple Calculator using LEX and YACC.

week 11 sp:
1.Write a LEXand YACCto create a symbol table for C Declarations.
exe:
1.Validate Boolean expression and flow of control statements.
Input:if ( a == b || c == d && e==f) x == 1;
2.Using  Lex  and  yacc  validate  the  if-elseconstruct  using  dangling  else Grammar. 
Input:   ibtibtaea   ,  ibtaeaStmt if expr then stmt| if expr then stmt else stmt| aExpr b
